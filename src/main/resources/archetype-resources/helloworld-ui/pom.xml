<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>${groupId}</groupId>
		<artifactId>${rootArtifactId}</artifactId>
		<version>${version}</version>
	</parent>

	<artifactId>${artifactId}</artifactId>
	<name>Helloword UI</name>
	<url>https://github.com/jsoagger/</url>

	<dependencies>
		<!-- jsoagger -->
		<dependency>
			<groupId>io.github.jsoagger</groupId>
			<artifactId>jsoagger-corebusiness-services</artifactId>
			<classifier>lib</classifier>
		</dependency>

		<!-- spring -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>

		<!-- Tests -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.verion}</version><!--$NO-MVN-MAN-VER$ -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.palantir.docker.compose</groupId>
			<artifactId>docker-compose-rule-junit4</artifactId>
			<version>${docker.compose.rule.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.palantir.docker.compose</groupId>
			<artifactId>docker-compose-rule-core</artifactId>
			<version>${docker.compose.rule.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.github.jsoagger</groupId>
			<artifactId>jsoagger-manager</artifactId>
			<version>${jsoagger-manager-version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>**/*</include>
				</includes>
			</testResource>
		</testResources>

		<plugins>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven.clean.version}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>frontWorking</directory>
							<includes>
								<include>**/*.*</include>
								<include>**/**/*</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${maven-jar-plugin.version}</version>
				<executions>
					<execution>
						<id>library</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<classifier>lib</classifier>
							<excludes>
								<exclude>/application.properties</exclude>
								<exclude>/banner.txt</exclude>
								<exclude>/log4j.properties</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>${maven.apt-plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>com.mysema.querydsl</groupId>
						<artifactId>querydsl-apt</artifactId>
						<version>${querydsl-core.version}</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources/</outputDirectory>
							<processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>fatjar</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<version>${springframework.boot.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>repackage</goal>
								</goals>
								<configuration>
									<classifier>sb</classifier>
									<finalName>helloworld-ui</finalName>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>${maven-dependency-plugin.version}</version>
						<executions>
							<execution>
								<id>unpack</id>
								<phase>package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>${project.groupId}</groupId>
											<artifactId>${project.artifactId}</artifactId>
											<version>${project.version}</version>
											<classifier>sb</classifier>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>copy-frontend</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>copy-frontend-public</id>
								<phase>process-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/frontWorking/public</outputDirectory>
									<encoding>UTF-8</encoding>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${basedir}/frontend/public</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-frontend-src</id>
								<phase>process-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/frontWorking/src</outputDirectory>
									<encoding>UTF-8</encoding>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${basedir}/frontend/src</directory>
											<includes>
												<include>**/*.*</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-frontend-packagejson</id>
								<phase>process-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/frontWorking</outputDirectory>
									<encoding>UTF-8</encoding>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${basedir}/frontend/</directory>
											<includes>
												<include>package.json</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>install-coreui</id>
			<properties>
				<skip.docker.build>true</skip.docker.build>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>io.github.jsoagger</groupId>
											<artifactId>jsoagger-corebusiness-services</artifactId>
											<classifier>lib</classifier>
											<outputDirectory>${project.build.directory}/coreui_src</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>copy-resources01</id>
								<phase>process-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/frontWorking/public</outputDirectory>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${project.build.directory}/coreui_src/frontend/_public</directory>
											<includes>
												<include>**/*.*</include>
												<include>**/*.json</include>
												<include>**/*.css</include>
												<include>**/*.scc</include>
												<include>**/*.scss</include>
												<include>**/assets/**</include>
												<include>**/fonts/**</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-resources04</id>
								<phase>process-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<overwrite>true</overwrite>
									<outputDirectory>${basedir}/frontWorking/public/assets/img</outputDirectory>
									<resources>
										<resource>
											<directory>${project.build.directory}/coreui_src/frontend/_public/assets/img</directory>
											<includes>
												<include>**/*</include>
												<include>**/*.json</include>
												<include>**/*.css</include>
												<include>**/*.scc</include>
												<include>**/*.scss</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-resources02</id>
								<phase>process-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/frontWorking/src</outputDirectory>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${project.build.directory}/coreui_src/frontend/_src</directory>
											<includes>
												<include>**/*</include>
												<include>**/assets/img/desktop1.png</include>
												<include>**/*.json</include>
												<include>**/*.css</include>
												<include>**/*.scc</include>
												<include>**/*.scss</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-resources03</id>
								<phase>process-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/frontWorking/src/assets/img</outputDirectory>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${project.build.directory}/coreui_src/frontend/_src/assets/img</directory>
											<includes>
												<include>**/*</include>
												<include>**/*.json</include>
												<include>**/*.css</include>
												<include>**/*.scc</include>
												<include>**/*.scss</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>npm-install</id>
			<properties>
				<skip.docker.build>true</skip.docker.build>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
							<workingDirectory>${basedir}/frontWorking</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>Install node and npm locally to the project</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
							</execution>
							<execution>
								<id>npm install</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<configuration>
									<arguments>install</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>npm-build</id>
			<properties>
				<skip.docker.build>true</skip.docker.build>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
							<workingDirectory>${basedir}/frontWorking</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>npm run build</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<configuration>
									<arguments>run build</arguments>
									<environmentVariables>
										<PUBLIC_URL>${env.REACT_PUBLIC_URL}</PUBLIC_URL>
										<REACT_APP_ROUTER_BASE>${env.REACT_APP_ROUTER_BASE}</REACT_APP_ROUTER_BASE>
										<REACT_APP_CONTEXT_ROOT>${env.REACT_APP_CONTEXT_ROOT}</REACT_APP_CONTEXT_ROOT>
										<REACT_APP_BUILD_DATETIME>${timestamp}</REACT_APP_BUILD_DATETIME>
										<REACT_APP_BUILD_VERSION>${env.APP_BUILD_VERSION}</REACT_APP_BUILD_VERSION>
									</environmentVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<configuration>
							<skipBuild>${skip.docker.build}</skipBuild>
							<forceTags>true</forceTags>
						</configuration>
						<executions>
							<execution>
								<id>build-helloworldui-docker-image</id>
								<goals>
									<goal>build</goal>
								</goals>
								<configuration>
									<imageName>helloworld-ui</imageName>
									<repository>jsoagger/helloworld-ui</repository>
									<tag>${project.version}</tag>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>integration-test</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>add-integration-test-sources</id>
								<goals>
									<goal>add-test-source</goal>
								</goals>
								<configuration>
									<!-- Configures the source directory of our integration tests -->
									<sources>
										<source>${project.basedir}/src/integration-test/java</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.7</version>
						<executions>
							<execution>
								<id>copy-integration-test-resources</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/integration-test-resources</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/src/integration-test/resources</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${maven-failsafe-plugin.version}</version>
						<executions>
							<execution>
								<id>integration-tests-h2</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<skipTests>false</skipTests>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
